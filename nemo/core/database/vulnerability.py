#!/usr/bin/env python3
# coding:utf-8
import traceback
import hashlib
from datetime import datetime
from datetime import timedelta

from . import dbutils
from . import daobase

from nemo.common.utils.loggerutils import logger


class Vulnerability(daobase.DAOBase):
    def __init__(self):
        super().__init__()
        self.table_name = 'vulnerability'
        self.order_by = 'update_datetime desc'

    def attr_hash(self, data):
        '''根据属性值计算hash
        '''
        hash_format = [str(data['target']), data['url'], data['poc_file'], data['source']]
        md5 = hashlib.new('md5', (''.join(hash_format)
                                  ).encode('utf-8')).hexdigest()
        return md5

    def add(self, data):
        '''增加一条记录：计算hash'''
        data['hash'] = self.attr_hash(data)
        return super().add(data)

    def update(self, Id, data):
        '''更新一条记录：如果hash需要更新，重新计算
        '''
        if 'hash' in data:
            data['hash'] = self.attr_hash(data)
        return super().update(Id, data)

    def save_and_update(self, data):
        '''保存数据
        新增或更新一条数据
        返回值：id
        '''
        # 查询obj是否已存在
        obj = self.gets({'hash': self.attr_hash(data)})
        # 如果该已存在，则更新记录
        if obj and len(obj) > 0:
            data_update = {}
            # 只更新extra
            if 'extra' in data and str(data['extra']) != obj[0]['extra']:
                data_update['extra'] = str(data['extra'])
            self.update(obj[0]['id'], data_update)
            return obj[0]['id']
        # 如果不存在，则生成新记录
        else:
            data_new = {'target': data['target'], 'url': data['url'],
                        'source': data['source'], 'poc_file': data['poc_file'],
                        'extra': str(data['extra']) if 'extra' in data else ''}
            return self.add(data_new)


    def __fill_search_where(self, target=None, poc_file=None, source=None, date_delta=None):
        '''根据指定的字段，生成查询SQL语句和参数
        '''
        sql = []
        param = []
        link_word = ' where '
        if target:
            sql.append(link_word)
            sql.append(' target like %s ')
            param.append('%' + target + '%')
            link_word = ' and '
        if poc_file:
            sql.append(link_word)
            sql.append(' poc_file like %s ')
            param.append('%' + poc_file + '%')
            link_word = ' and '
        if source:
            sql.append(link_word)
            sql.append(' source = %s ')
            param.append(source)
            link_word = ' and '
        if date_delta:
            try:
                days_span = int(date_delta)
                if days_span > 0:
                    sql.append(link_word)
                    sql.append(' update_datetime between %s and %s ')
                    param.append(datetime.now() - timedelta(days=days_span))
                    param.append(datetime.now())
                    link_word = ' and '
            except:
                logger.error(traceback.format_exc())
                logger.error('date delta error:{}'.format(date_delta))

        return sql, param

    def count_by_search(self, target=None, poc_file=None, source=None, date_delta=None):
        '''统计记录总条数
        '''
        sql = []
        param = []
        sql.append('select count(id) from {} '.format(self.table_name))
        # 查询条件
        where_sql, where_param = self.__fill_search_where(
            target, poc_file, source, date_delta)
        sql.extend(where_sql)
        param.extend(where_param)

        return dbutils.queryone(''.join(sql), param)

    def gets_by_search(self, target=None, poc_file=None, source=None, date_delta=None,
                       fields=None, page=1, rows_per_page=None, order_by=None):
        '''根据组织机构、IP地址（包括范围）及端口的综合查询
        fields:     要返回的字段，列表格式('id','name','port')
        page:       分页位置，从1开始
        rows_per_page:  每页的记录数
        order_by     :  排序字段
        '''
        sql = []
        param = []
        sql.append('select {} from {} '.format(
            self.fill_fields(fields), self.table_name))
        # 查询条件
        where_sql, where_param = self.__fill_search_where(
            target, poc_file, source,  date_delta)
        sql.extend(where_sql)
        param.extend(where_param)
        # 排序、分页
        sql.append(self.fill_order_by_and_limit(
            param, order_by, page, rows_per_page))

        return dbutils.queryall(''.join(sql), param)
