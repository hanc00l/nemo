#!/usr/bin/env python3
# coding:utf-8
import traceback

from flask import Blueprint
from flask import jsonify
from flask import render_template
from flask import request

from nemo.common.utils.loggerutils import logger
from nemo.core.database.vulnerability import Vulnerability
from .authenticate import login_check

vulnerability_manager = Blueprint("vulnerability_manager", __name__)


def _str2bool(v):
    return str(v).lower() in ('true', 'success', 'yes', '1')


@vulnerability_manager.route('/vulnerability-list', methods=['GET', 'POST'])
@login_check
def vulnerability_list_view():
    '''任务列表展示
    '''
    if request.method == 'GET':
        return render_template('vulnerability-list.html')

    vul_list = []
    json_data = {}
    index = 1

    try:
        draw = int(request.form.get('draw'))
        start = int(request.form.get('start'))
        length = int(request.form.get('length'))
        vul_source = request.form.get('vul_source')
        vul_target = request.form.get('vul_target')
        vul_poc_file = request.form.get('vul_poc_file')
        date_delta = request.form.get('date_delta')

        vul_app = Vulnerability()
        vul_results = vul_app.gets_by_search(target=vul_target, poc_file=vul_poc_file, source=vul_source,
                                             date_delta=date_delta,
                                             page=(start // length) + 1, rows_per_page=length)
        for row in vul_results:
            vul = {'id': row['id'], 'index': index, 'target': row['target'], 'url': row['url'],
                   'poc_file': row['poc_file'], 'source': row['source']}
            vul.update(create_datetime=row['create_datetime'].strftime("%Y-%m-%d %H:%M"))
            vul.update(update_datetime=row['update_datetime'].strftime("%Y-%m-%d %H:%M"))
            vul_list.append(vul)
            index += 1

        count = vul_app.count_by_search(target=vul_target, poc_file=vul_poc_file, source=vul_source,
                                        date_delta=date_delta, )
        json_data = {
            'draw': draw,
            'recordsTotal': count,
            'recordsFiltered': count,
            'data': vul_list
        }
    except Exception as e:
        logger.error(traceback.format_exc())
        print(e)

    return jsonify(json_data)


@vulnerability_manager.route('/vulnerability-info', methods=['GET'])
@login_check
def vulnerability_info_view():
    id = request.args.get('id')
    vul_app = Vulnerability()
    vuls = vul_app.gets(query={'id': id})
    if vuls and len(vuls) > 0:
        row = vuls[0]
        vul = {'id': row['id'], 'target': row['target'], 'url': row['url'],
               'poc_file': row['poc_file'], 'source': row['source']}
        vul.update(extra=row['extra'].replace('\\r\\n', '\r').replace('\\r', '\r').replace('\\n', '\n'))
        vul.update(create_datetime=row['create_datetime'].strftime("%Y-%m-%d %H:%M:%S"))
        vul.update(update_datetime=row['update_datetime'].strftime("%Y-%m-%d %H:%M:%S"))
    else:
        vul = None

    return render_template('vulnerability-info.html', vul_info=vul)


@vulnerability_manager.route('/vulnerability-delete', methods=['POST'])
@login_check
def vulnerability_delete_view():
    '''删除一个任务
    '''
    id = request.form.get('id')
    if not id:
        return jsonify({'status': 'fail'})

    vul_app = Vulnerability()
    vul_app.delete(id)

    return jsonify({'status': 'success'})
